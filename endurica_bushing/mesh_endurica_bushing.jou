#!python
mesh_size = "medium" # Choices: ["coarse", "medium", "fine"]

## MESH BLOCK 1
#!cubit
reset
undo off
import acis "Bushing_WOD_Cubit.sat" nofreesurfaces heal attributes_on  separate_bodies 

delete vol all except vol 1
compress ids

webcut volume 1  with plane normal to curve 54  close_to vertex 36  
webcut volume 2  with plane normal to curve 168  fraction .5 from start 
webcut volume 2  with plane normal to curve 180  fraction .5 from start 
delete volume all except volume 2
compress ids

project curve 2  onto surface 5  
webcut volume 1  sweep curve 46  vector 0 -1 0 through_all 
delete curve all

### Prepare fillet region
#### Curve on plane surface
project curve 5 onto surface 18
create surface skin curve 5 58  

create vertex on curve 47  close_to vertex 43  
create curve vertex 3 45  
create curve vertex 43 45  
create surface curve 60 64 63  

create vertex on curve 49  close_to vertex 39  
create curve vertex 4 49  
create curve vertex 49 39  
create surface curve 62 66 67  
unite body 3 4 5
webcut volume 1 tool body 3
delete body 3
delete curve all
compress ids

### Prepare Nub
webcut volume 2 with sheet extended from surface 2
webcut volume 4 with sheet extended from surface 10
webcut volume 4 5  sweep surface 4  perpendicular inward through_all 
webcut volume 6 4  with plane normal to curve 83  close_to vertex 14  

### Prepare outer region
create vertex on curve 21 31 30 7  midpoint 
create curve vertex 80 81  
create vertex on curve 131  midpoint 
create curve arc  three vertex 82 83 79  
webcut volume 2  sweep curve 132  vector 0 -1 0 through_all 
del curve all
del vertex all

### Prepare inner region
webcut volume 10 with cylinder radius 28.13596 axis y center 0 0 0

### Prepare core region
#!python
import math
import scipy

def get_curvature_at_fraction( curve_id, fraction ):
  curve = cubit.curve( curve_id )
  curvature_components = curve.curvature( curve.position_from_fraction( fraction ) )
  curvature = math.sqrt( curvature_components[0]**2 + curvature_components[1]**2 + curvature_components[2]**2 )
  return curvature

def maximize_curvature( curve_id, fraction ):
  curvature = get_curvature_at_fraction( curve_id, fraction )
  return -1 * curvature

curve_id = 164
fraction = scipy.optimize.minimize_scalar( lambda f: maximize_curvature( curve_id, f ), bounds=(0, 1) ).x
x = cubit.curve( curve_id ).position_from_fraction( fraction )
cubit.cmd( f"create vertex on curve {curve_id} position {x[0]} {x[1]} {x[2]}" )

#!cubit
webcut volume 11 with plane normal to curve 41 close_to vertex 100
delete vertex all

### Composite surfaces
composite create surface 85 83  keep angle 15 
composite create surface 96 9  keep angle 15 
composite create surface 26 27 28 keep angle 15
composite create surface 20 21 22 keep angle 15

### Imprint and merge
imprint all
merge all

### Mesh
#!python
cubit.cmd( "reset volume all" )
cubit.cmd( "paver cleanup extend" )

cubit.cmd( "surface 29  scheme triprimitive" )
cubit.cmd(f"surface 29 size { {'coarse':2, 'medium':0.5, 'fine':0.25}[mesh_size] }" )
cubit.cmd( "mesh surface 29" )
cubit.cmd( "volume 3  redistribute nodes off" )
cubit.cmd( "volume 3  scheme Sweep  source surface 29 target surface 30 sweep transform least squares" )
cubit.cmd( "volume 3  autosmooth target off  fixed imprints off  smart smooth off" )
cubit.cmd(f"curve in volume 3 size { {'coarse':1, 'medium':0.5, 'fine':0.25}[mesh_size] }" )
cubit.cmd( "surface in volume 3 size { {'coarse':1, 'medium':0.5, 'fine':0.25}[mesh_size] }" )
cubit.cmd( "volume 3 size { {'coarse':1, 'medium':0.5, 'fine':0.25}[mesh_size] }" )
cubit.cmd( "mesh volume 3" )
cubit.cmd( "set smooth tolerance 0.01" )
cubit.cmd( "volume 3  smooth scheme laplacian free" )
cubit.cmd( "smooth volume 3" )

cubit.cmd(f"vol 1 size { {'coarse':4, 'medium':2, 'fine':1}[mesh_size] }" )
cubit.cmd( "volume 1  redistribute nodes on" )
cubit.cmd( "volume 1  scheme Sweep  source surface 106    target surface 15   sweep transform translate propagate bias" )
cubit.cmd( "volume 1  autosmooth target off" )
cubit.cmd( "mesh volume 1" )

cubit.cmd(f"volume 4 6 8 9 size { {'coarse':1, 'medium':0.5, 'fine':0.25}[mesh_size] }" )
cubit.cmd( "mesh Volume 4 6 8 9" )


cubit.cmd(f"volume all except with is_meshed size { {'coarse':6, 'medium':2, 'fine':1}[mesh_size] }" )
cubit.cmd( "mesh vol all except with is_meshed" )

cubit.cmd( "volume all copy reflect x" )
cubit.cmd( "volume all copy reflect vertex 25 24" )
cubit.cmd( "volume all copy reflect z" )
cubit.cmd( "merge vol all" )

#!cubit
block 1 volume all
export abaqus "arm_bushing.inp" block 1 instance block 1 source_csys 0 target_csys 0  mesh_only overwrite
save cub5 "arm_bushing.cub5" overwrite

## MESH OUTER CASE
#!cubit
reset
undo off
import acis "Bushing_WOD_Cubit.sat" nofreesurfaces heal attributes_on  separate_bodies 

delete vol all except vol 2
regularize vol all
compress ids

webcut volume all with sheet extended from surface 1  
webcut volume all with sheet extended from surface 2  
webcut volume all with plane normal to curve 2  close_to vertex 1  
webcut volume all with plane normal to curve 45  fraction .5 from start 

imprint all
merge all

#!python
cubit.cmd(f"vol all size { {'coarse':4, 'medium':2, 'fine':1}[mesh_size] }" )
cubit.cmd( "mesh vol all" )

#!cubit
block 2 volume all
export abaqus "case.inp" block 2 instance block 2 source_csys 0 target_csys 0  mesh_only overwrite
save cub5 "case.cub5" overwrite

## MESH CORE
#!cubit
reset
undo off
import acis "Bushing_WOD_Cubit.sat" nofreesurfaces heal attributes_on  separate_bodies 

delete vol all except vol 3
regularize vol all
compress ids

webcut volume all with plane normal to curve 4  close_to vertex 4  
webcut volume all with plane normal to curve 16  fraction .5 from start 

imprint all
merge all

#!python
cubit.cmd(f"vol all size { {'coarse':4, 'medium':2, 'fine':1}[mesh_size] }" )
cubit.cmd( "mesh vol all" )

#!cubit
block 3 volume all
export abaqus "core.inp" block 3 instance block 3 source_csys 0 target_csys 0  mesh_only overwrite
save cub5 "core.cub5" overwrite
